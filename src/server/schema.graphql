type Query {
    _dummy: String
    fetchStudents(teacherId: String!): [Student]
    fetchPracticeTexts(studentId: String!): [PracticeText]
    fetchStudent(studentId: String!): Student
    fetchProgress(teacherId: String!, studentId: String!): [AverageRating]
}

type Mutation {
    login(username: String!, password: String!): AuthPayload
    updateRating(teacherId: String!, studentId: String!, practiceTextId:String!, newRating: Int!): Boolean
    updateText(teacherId: String!, studentId: String!, practiceTextId:String!, newText: String!): Boolean
    addPracticeText(teacherId: String!, studentId: String!, text: String!): Boolean
    addStudent(teacherId: String!, studentName: String!): Boolean
    calculateAndSaveAverage(teacherId: String!, studentId: String!): Boolean
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    username: String!
    role: String!
}

type Student {
    _id: ID!
    teacherId: String!
    name: String!
}

type PracticeText {
    _id: ID!
    text: String
    latestRating: Int
}

type AverageRating {
    lastActive: String!
    average: Float!
    totalPracticed: Int!
}